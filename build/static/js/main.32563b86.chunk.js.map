{"version":3,"sources":["App.js","index.js"],"names":["Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","collected","_this2","navigator","geolocation","watchPosition","x","setState","loc","latitude","coords","longitude","heading","speed","firstPos","console","log","locations","grn","data","filter","undefined","eur","map","card","a","rnd","arena_id","t","Math","imul","assign","long","lat","arr","dx","dy","sqrt","_this3","w","window","innerWidth","h","innerHeight","react_default","createElement","className","lib_react_default","center","zoom","width","height","inColl","findIndex","y","pigeon_overlay_lib_react_default","anchor","inReach","onClick","concat","getSymbol","alt","src","image_uris","art_crop","href","target","style","position","top","right","info","backgroundColor","padding","length","key","color","textDecoration","color_identity","toString","toLowerCase","name","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.32563b86.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport grn from './grn.json'\nimport Map from \"pigeon-maps\"\nimport Overlay from \"pigeon-overlay\"\n\nclass MapItem extends Component {\n    render() {\n        return <div>{this.props.children}</div>\n    }\n}\n\nfunction mulberry32(a) {\n    return function () {\n        var t = a += 0x6D2B79F5;\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collected: []\n        }\n    }\n\n    componentDidMount() {\n        if (\"geolocation\" in navigator) {\n            navigator.geolocation.watchPosition(x => {\n                this.setState({\n                    loc: {\n                        latitude: x.coords.latitude,\n                        longitude: x.coords.longitude,\n                        heading: x.coords.heading,\n                        speed: x.coords.speed\n                    }\n                })\n                if (!this.state.firstPos) {\n                    console.log(\"firstPos\")\n                    this.setState({\n                        firstPos: true,\n                        locations: grn.data.filter(x => x.eur !== undefined).map(card => {\n                            const rnd = mulberry32(card.arena_id)\n                            return Object.assign({}, card, {\n                                long: x.coords.longitude + rnd() / 100,\n                                lat: x.coords.latitude + rnd() / 100\n                            })\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    inReach(arr, x) {\n        const dx = arr[0] - x.lat\n        const dy = arr[1] - x.long\n        return Math.sqrt(dx * dx + dy * dy) < 0.0014\n    }\n\n    render() {\n        const arr =\n            this.state.loc ?\n                [this.state.loc.latitude, this.state.loc.longitude] :\n                [54.3126, 10.11]\n        const firstPos = this.state.firstPos || arr\n        // const screen = window.screen\n        const w = window.innerWidth - 5\n        const h = window.innerHeight - 5\n\n        const zoom = 18\n\n        return (\n            <div className=\"App\">\n                <Map center={arr} zoom={zoom} width={w} height={h}>\n                    {(this.state.locations || []).map(x => {\n                            const inColl = this.state.collected.findIndex(y => y.arena_id === x.arena_id) >= 0\n                            return <Overlay anchor={[x.lat, x.long]}>\n                                {this.inReach(arr, x) ? <div\n                                        onClick={() => {\n                                            if (this.state.collected.findIndex(y => y.arena_id === x.arena_id) === -1 && this.inReach(arr, x)) {\n                                                this.setState({\n                                                    collected: this.state.collected.concat([x])\n                                                })\n                                            }\n                                        }}>\n                                        {this.getSymbol(x)}\n                                        {inColl && \"âœ“\"}\n                                        <br/>\n                                        <img alt=\"\" src={x.image_uris && x.image_uris.art_crop} width={100}/>\n                                    </div> :\n                                    this.getSymbol(x)}\n                            </Overlay>\n                        }\n                    )}\n                    <Overlay anchor={arr}>\n                        <div className=\"ripplecontainer\">\n                            <a className=\"circle photo\" href=\"//time2hack.com\" target=\"_blank\"></a>\n                            <div className=\"ripplecircle\"></div>\n                        </div>\n                    </Overlay>\n\n                </Map>\n                <p style={{position: \"absolute\", top: 0, right: 0}}>\n                    {/*this.state.selected && <div>\n                        {this.state.selected.name}\n                        <br/>\n                        <img src={this.state.selected.image_uris && this.state.selected.image_uris.art_crop}\n                             width={100}/>\n                        <br/>\n                    </div>*/}\n                    <div onClick={() => this.setState({info: !this.state.info})}\n                         style={{backgroundColor: \"rgba(255,255,255,0.8)\", padding: 8}}>\n                        <span className=\"ms ms-multiple\"/>\n                        Info\n                        ({this.state.collected.length})\n                        {this.state.info &&\n                        <div>\n                            <hr/>\n                            {/*JSON.stringify(Object.assign({}, this.state, {locations: (this.state.locations || []).length}))*/}\n                            Collected:\n                            <ul>\n                                {this.state.collected.map(x =>\n                                    <li key={\"l\" + x.arena_id}>\n                                        {this.getSymbol(x)}\n                                    </li>\n                                )}\n                            </ul>\n                            <br/>\n                            <a style={{color: \"black\", textDecoration: \"none\"}}\n                               href=\"https://pigeon-maps.js.org\"\n                               target=\"_blank\">Powered by pigeon-maps</a>\n                        </div>}\n                    </div>\n\n                </p>\n            </div>\n        );\n    }\n\n    getSymbol(x) {\n        const guilds = {\n            uw: \"ms-guild-azorius\",\n            wr: \"ms-guild-boros\",\n            ub: \"ms-guild-dimir\",\n            bg: \"ms-guild-golgari\",\n            rg: \"ms-guild-gruul\",\n            ur: \"ms-guild-izzet\",\n            bw: \"ms-guild-orzhov\",\n            br: \"ms-guild-rakdos\",\n            wg: \"ms-guild-selesnya\",\n            ug: \"ms-guild-simic\"\n        }\n        return <span><span className={\"ms ms-\" + ((x.color_identity || [])[0] + \"\").toString().toLowerCase()}/> {x.name}</span>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}