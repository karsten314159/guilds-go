{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["HR","react_default","a","createElement","style","borderBottom","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","collected","time","Date","getTime","strategy","x","y","z","now","console","log","setState","_ref","loc","url","latitude","longitude","_this2","self","updateSize","w","window","innerWidth","h","innerHeight","navigator","addEventListener","setInterval","tick","geolocation","watchPosition","coords","heading","speed","firstPos","locations","grn","data","filter","undefined","eur","map","card","rnd","arena_id","t","Math","imul","assign","long","lat","arr","dist","dx","dy","sqrt","_this3","_this$state","className","lib_react_default","center","zoom","width","height","pigeon_overlay_lib_react_default","anchor","href","target","i","inColl","inReach","display","justifyContent","onClick","findIndex","concat","getSymbol","alt","src","image_uris","art_crop","MapItem","key","position","top","right","info","backgroundColor","padding","length","App_HR","reach","suf","color_identity","toString","toLowerCase","uw","rw","bu","bg","gr","ru","bw","br","gw","gu","sort","join","color","fontSize","name","toFixed","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8f4cf59.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport grn from './grn.json'\nimport Map from \"pigeon-maps\"\nimport Overlay from \"pigeon-overlay\"\n\nclass HR extends Component {\n    render() {\n        return <div style={{borderBottom: \"1px solid black\"}}/>\n    }\n}\n\nfunction MapItem(props) {\n    let {x, self, inColl, arr} = props\n    return <Overlay anchor={[x.lat, x.long]}>\n        {self.inReach(arr, x) ? <div\n                style={{display: \"flex\", justifyContent: \"space-between\"}}\n                onClick={() => {\n                    if (self.state.collected.findIndex(y => y.arena_id === x.arena_id) === -1 && self.inReach(arr, x)) {\n                        console.log(\"claim \" + x.arena_id)\n                        self.setState({\n                            collected: self.state.collected.concat([x])\n                        })\n                    }\n                }}>\n                {self.getSymbol(x, arr, inColl, true)}\n                {inColl && <img alt=\"\" src={x.image_uris && x.image_uris.art_crop} width={100} height={100 * (457 / 624)}/>}\n            </div> :\n            self.getSymbol(x, arr, inColl, false)}\n    </Overlay>\n}\n\nfunction mulberry32(a) {\n    return function () {\n        var t = a += 0x6D2B79F5;\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collected: [],\n            time: new Date().getTime(),\n            strategy: function (x, y, z) {\n                // \"http://c.tile.stamen.com/toner/\" + z + \"/\" + x + \"/\" + y + \".png\"\n                // \"https://c.basemaps.cartocdn.com/rastertiles/voyager/\" + z + \"/\" + x + \"/\" + y + \".png\"\n                return \"http://b.tile.stamen.com/watercolor/\" + z + \"/\" + x + \"/\" + y + \".jpg\"\n            }\n        }\n    }\n\n    tick() {\n        let now = new Date().getTime()\n        let last = this.state.time\n        if (now - last > 4000) {\n            console.log(\"4 sec passed\")\n            this.setState({time: now})\n            let key = \"25789a3c7e539e6cf6fb2ae24a3498dc\"\n            let {latitude, longitude} = this.state.loc || {}\n            let url = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + key\n            console.log(url)\n        }\n    }\n\n    componentDidMount() {\n        let self = this\n\n        function updateSize() {\n            self.setState({\n                w: window.innerWidth - 3,\n                h: window.innerHeight - 4\n            })\n        }\n\n        if (\"geolocation\" in navigator) {\n            // window.location\n            // let history = window.history\n            // history.replaceState(\" \", \"Guilds Go\", \"http://tinyurl.com/guildsgo\")\n            //document.documentElement.webkitRequestFullscreen()\n            updateSize()\n            window.addEventListener(\"resize\", updateSize)\n            setInterval(() => this.tick(), 1000)\n            navigator.geolocation.watchPosition(x => {\n                this.setState({\n                    loc: {\n                        latitude: x.coords.latitude,\n                        longitude: x.coords.longitude,\n                        heading: x.coords.heading,\n                        speed: x.coords.speed\n                    }\n                })\n                if (!this.state.firstPos) {\n                    console.log(\"firstPos\")\n                    this.setState({\n                        firstPos: true,\n                        locations: grn.data.filter(x => x.eur !== undefined).map(card => {\n                            let rnd = mulberry32(card.arena_id)\n                            return Object.assign({}, card, {\n                                long: x.coords.longitude + rnd() / 50 - 0.004,\n                                lat: x.coords.latitude + rnd() / 50 - 0.004\n                            })\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    inReach(arr, x) {\n        return this.dist(arr, x) < 0.0014\n    }\n\n    dist(arr, x) {\n        let dx = arr[0] - x.lat\n        let dy = arr[1] - x.long\n        return Math.sqrt(dx * dx + dy * dy)\n    }\n\n    render() {\n        let arr =\n            this.state.loc ?\n                [this.state.loc.latitude, this.state.loc.longitude] :\n                [54.3126, 10.11]\n        let firstPos = this.state.firstPos || arr\n        // let screen = window.screen\n        let {w, h} = this.state\n\n        let zoom = 17 //18\n        // limitBounds=\"true\" twoFingerDrag=\"true\" touchEvents=\"false\"  metaWheelZoom=\"false\"\n        return (\n            <div className=\"App\">\n                <Map center={arr} zoom={zoom} width={w} height={h}\n                    /*provider={(x, y, z) => {\n                        // console.log(x + \"/\" + y + \"/\" + z)\n                        return this.state.strategy(x, y, z)\n                    }}*/>\n                    <Overlay anchor={arr}>\n                        <div className=\"ripplecontainer\">\n                            <a className=\"circle photo\" href=\"//time2hack.com\" target=\"_blank\"></a>\n                            <div className=\"ripplecircle\"></div>\n                        </div>\n                    </Overlay>\n\n                    {(this.state.locations || []).map((x, i) => {\n                        let inColl = this.state.collected.findIndex(y => y.arena_id === x.arena_id) >= 0\n                        return MapItem({key: \"i\" + i, inColl: inColl, x: x, self: this, arr: arr})\n                    })}\n                </Map>\n                <div style={{position: \"absolute\", top: 0, right: 0}}>\n                    {/*this.state.selected && <div>\n                        {this.state.selected.name}\n                        <br/>\n                        <img src={this.state.selected.image_uris && this.state.selected.image_uris.art_crop}\n                             width={100}/>\n                        <br/>\n                    </div>*/}\n                    <div onClick={() => this.setState({info: !this.state.info})}\n                         style={{backgroundColor: \"rgba(255,255,255,0.8)\", padding: 8}}>\n                        <span className=\"ms ms-multiple\"/>\n                        <span> </span>\n                        Info\n                        <span> </span>({this.state.collected.length})\n                        {this.state.info &&\n                        <div>\n                            <HR/>\n                            {/*JSON.stringify(Object.assign({}, this.state, {locations: (this.state.locations || []).length}))*/}\n                            Collected:\n                            <ul>\n                                {this.state.collected.map(x =>\n                                    <li key={\"l\" + x.arena_id}>\n                                        {this.getSymbol(x, arr, true, true)}\n                                    </li>\n                                )}\n                            </ul>\n                            <br/>\n                            Running in {this.state.w}x{this.state.h}<br/>\n                            <span>Uses: </span>\n                            <a href=\"https://pigeon-maps.js.org\" target=\"_blank\">pigeon maps</a>\n                            <br/><span>&nbsp;&nbsp;&nbsp;&nbsp;+ </span>\n                            <a href=\"http://maps.stamen.com\" target=\"_blank\">stamen watercolor</a>\n                        </div>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    getSymbol(x, arr, inColl, reach) {\n        let guilds = {\n            uw: \"guild-azorius\",\n            rw: \"guild-boros\",\n            bu: \"guild-dimir\",\n            bg: \"guild-golgari\",\n            gr: \"guild-gruul\",\n            ru: \"guild-izzet\",\n            bw: \"guild-orzhov\",\n            br: \"guild-rakdos\",\n            gw: \"guild-selesnya\",\n            gu: \"guild-simic\"\n        }\n        let suf = ((x.color_identity || [])[0] + \"\").toString().toLowerCase()\n        if (x.color_identity.length === 2) {\n            let joined = x.color_identity.sort().join(\"\").toLowerCase()\n            //console.log(x.color_identity, joined, guilds[joined])\n            suf = guilds[joined]\n        }\n        return <span style={{color: inColl ? \"#10A010\" : reach ? \"#000000\" : \"#303030\"}}>\n            <span style={{fontSize: \"160%\"}} className={\"ms ms-\" + suf}/> {reach && x.name}\n            {inColl ? \" ✓\" : <i> {(100000 * this.dist(arr, x)).toFixed(3)}m</i>}\n        </span>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {unregister} from \"./serviceWorker\"\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}