{"version":3,"sources":["App.js","index.js"],"names":["HR","react_default","a","createElement","style","borderBottom","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","collected","time","Date","getTime","strategy","x","y","z","now","console","log","setState","_ref","loc","url","latitude","longitude","_this2","self","updateSize","w","window","innerWidth","h","innerHeight","navigator","document","documentElement","webkitRequestFullscreen","addEventListener","setInterval","tick","geolocation","watchPosition","coords","heading","speed","firstPos","locations","grn","data","filter","undefined","eur","map","card","rnd","arena_id","t","Math","imul","assign","long","lat","arr","dist","dx","dy","sqrt","_this3","_this$state","className","lib_react_default","center","zoom","width","height","metaWheelZoom","limitBounds","twoFingerDrag","touchEvents","provider","pigeon_overlay_lib_react_default","anchor","href","target","i","inColl","inReach","display","justifyContent","onClick","findIndex","concat","getSymbol","alt","src","image_uris","art_crop","MapItem","key","position","top","right","info","backgroundColor","padding","length","App_HR","reach","suf","color_identity","toString","toLowerCase","uw","rw","bu","bg","gr","ru","bw","br","gw","gu","sort","join","color","fontSize","name","toFixed","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.8f505575.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport grn from './grn.json'\nimport Map from \"pigeon-maps\"\nimport Overlay from \"pigeon-overlay\"\n\nclass HR extends Component {\n    render() {\n        return <div style={{borderBottom: \"1px solid black\"}}/>\n    }\n}\n\nfunction MapItem(props) {\n    let {x, self, inColl, arr} = props\n    return <Overlay anchor={[x.lat, x.long]}>\n        {self.inReach(arr, x) ? <div\n                style={{display: \"flex\", justifyContent: \"space-between\"}}\n                onClick={() => {\n                    if (self.state.collected.findIndex(y => y.arena_id === x.arena_id) === -1 && self.inReach(arr, x)) {\n                        console.log(\"claim \" + x.arena_id)\n                        self.setState({\n                            collected: self.state.collected.concat([x])\n                        })\n                    }\n                }}>\n                {self.getSymbol(x, arr, inColl, true)}\n                {inColl && <img alt=\"\" src={x.image_uris && x.image_uris.art_crop} width={100} height={100 * (457 / 624)}/>}\n            </div> :\n            self.getSymbol(x, arr, inColl, false)}\n    </Overlay>\n}\n\nfunction mulberry32(a) {\n    return function () {\n        var t = a += 0x6D2B79F5;\n        t = Math.imul(t ^ (t >>> 15), t | 1);\n        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            collected: [],\n            time: new Date().getTime(),\n            strategy: function (x, y, z) {\n                // \"http://c.tile.stamen.com/toner/\" + z + \"/\" + x + \"/\" + y + \".png\"\n                // \"https://c.basemaps.cartocdn.com/rastertiles/voyager/\" + z + \"/\" + x + \"/\" + y + \".png\"\n                return \"http://b.tile.stamen.com/watercolor/\" + z + \"/\" + x + \"/\" + y + \".jpg\"\n            }\n        }\n    }\n\n    tick() {\n        let now = new Date().getTime()\n        let last = this.state.time\n        if (now - last > 4000) {\n            console.log(\"4 sec passed\")\n            this.setState({time: now})\n            let key = \"25789a3c7e539e6cf6fb2ae24a3498dc\"\n            let {latitude, longitude} = this.state.loc || {}\n            let url = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + key\n            console.log(url)\n        }\n    }\n\n    componentDidMount() {\n        let self = this\n\n        function updateSize() {\n            self.setState({\n                w: window.innerWidth - 3,\n                h: window.innerHeight - 4\n            })\n        }\n\n        if (\"geolocation\" in navigator) {\n            // window.location\n            // let history = window.history\n            // history.replaceState(\" \", \"Guilds Go\", \"http://tinyurl.com/guildsgo\")\n            document.documentElement.webkitRequestFullscreen()\n            updateSize()\n            window.addEventListener(\"resize\", updateSize)\n            setInterval(() => this.tick(), 1000)\n            navigator.geolocation.watchPosition(x => {\n                this.setState({\n                    loc: {\n                        latitude: x.coords.latitude,\n                        longitude: x.coords.longitude,\n                        heading: x.coords.heading,\n                        speed: x.coords.speed\n                    }\n                })\n                if (!this.state.firstPos) {\n                    console.log(\"firstPos\")\n                    this.setState({\n                        firstPos: true,\n                        locations: grn.data.filter(x => x.eur !== undefined).map(card => {\n                            let rnd = mulberry32(card.arena_id)\n                            return Object.assign({}, card, {\n                                long: x.coords.longitude + rnd() / 50 - 0.004,\n                                lat: x.coords.latitude + rnd() / 50 - 0.004\n                            })\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    inReach(arr, x) {\n        return this.dist(arr, x) < 0.0014\n    }\n\n    dist(arr, x) {\n        let dx = arr[0] - x.lat\n        let dy = arr[1] - x.long\n        return Math.sqrt(dx * dx + dy * dy)\n    }\n\n    render() {\n        let arr =\n            this.state.loc ?\n                [this.state.loc.latitude, this.state.loc.longitude] :\n                [54.3126, 10.11]\n        let firstPos = this.state.firstPos || arr\n        // let screen = window.screen\n        let {w, h} = this.state\n\n        let zoom = 17 //18\n\n        return (\n            <div className=\"App\">\n                <Map center={arr} zoom={zoom} width={w} height={h} metaWheelZoom=\"false\"\n                     limitBounds=\"true\" twoFingerDrag=\"true\" touchEvents=\"false\"\n                     provider={(x, y, z) => {\n                         // console.log(x + \"/\" + y + \"/\" + z)\n                         return this.state.strategy(x, y, z)\n                     }}>\n\n                    <Overlay anchor={arr}>\n                        <div className=\"ripplecontainer\">\n                            <a className=\"circle photo\" href=\"//time2hack.com\" target=\"_blank\"></a>\n                            <div className=\"ripplecircle\"></div>\n                        </div>\n                    </Overlay>\n\n                    {(this.state.locations || []).map((x, i) => {\n                        let inColl = this.state.collected.findIndex(y => y.arena_id === x.arena_id) >= 0\n                        return MapItem({key: \"i\" + i, inColl: inColl, x: x, self: this, arr: arr})\n                    })}\n                </Map>\n                <div style={{position: \"absolute\", top: 0, right: 0}}>\n                    {/*this.state.selected && <div>\n                        {this.state.selected.name}\n                        <br/>\n                        <img src={this.state.selected.image_uris && this.state.selected.image_uris.art_crop}\n                             width={100}/>\n                        <br/>\n                    </div>*/}\n                    <div onClick={() => this.setState({info: !this.state.info})}\n                         style={{backgroundColor: \"rgba(255,255,255,0.8)\", padding: 8}}>\n                        <span className=\"ms ms-multiple\"/>\n                        <span> </span>\n                        Info\n                        <span> </span>({this.state.collected.length})\n                        {this.state.info &&\n                        <div>\n                            <HR/>\n                            {/*JSON.stringify(Object.assign({}, this.state, {locations: (this.state.locations || []).length}))*/}\n                            Collected:\n                            <ul>\n                                {this.state.collected.map(x =>\n                                    <li key={\"l\" + x.arena_id}>\n                                        {this.getSymbol(x, arr, true, true)}\n                                    </li>\n                                )}\n                            </ul>\n                            <br/>\n                            Running in {this.state.w}x{this.state.h}<br/>\n                            <span>Uses: </span>\n                            <a href=\"https://pigeon-maps.js.org\" target=\"_blank\">pigeon maps</a>\n                            <br/><span>&nbsp;&nbsp;&nbsp;&nbsp;+ </span>\n                            <a href=\"http://maps.stamen.com\" target=\"_blank\">stamen watercolor</a>\n                        </div>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    getSymbol(x, arr, inColl, reach) {\n        let guilds = {\n            uw: \"guild-azorius\",\n            rw: \"guild-boros\",\n            bu: \"guild-dimir\",\n            bg: \"guild-golgari\",\n            gr: \"guild-gruul\",\n            ru: \"guild-izzet\",\n            bw: \"guild-orzhov\",\n            br: \"guild-rakdos\",\n            gw: \"guild-selesnya\",\n            gu: \"guild-simic\"\n        }\n        let suf = ((x.color_identity || [])[0] + \"\").toString().toLowerCase()\n        if (x.color_identity.length === 2) {\n            let joined = x.color_identity.sort().join(\"\").toLowerCase()\n            //console.log(x.color_identity, joined, guilds[joined])\n            suf = guilds[joined]\n        }\n        return <span style={{color: inColl ? \"#10A010\" : reach ? \"#000000\" : \"#303030\"}}>\n            <span style={{fontSize: \"160%\"}} className={\"ms ms-\" + suf}/> {reach && x.name}\n            {inColl ? \" ✓\" : <i> {(100000 * this.dist(arr, x)).toFixed(3)}m</i>}\n        </span>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}